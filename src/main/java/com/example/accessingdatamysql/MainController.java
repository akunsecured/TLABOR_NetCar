package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {



	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private CarRepository carRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

	User n = new User();
		n.setName(name);
		n.setEmail(email);

	Car c = new Car();
		c.setUser(n);
	//c.setId(n.getId());
		userRepository.save(n);
		carRepository.save(c);
		return "Saved";
					}


	@PostMapping(path="/addUser") // Map ONLY POST Requests
	public @ResponseBody String addNewUser2 (@RequestBody User user) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Car c = new Car();
		c.setUser(user);
		//c.setId(n.getId());
		userRepository.save(user);
		carRepository.save(c);
		return "Saved";
	}




	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path = "/users/{id}")
	public  @ResponseBody  Optional<User> getUserById(@PathVariable(value = "id") Integer UserId)
	{
		//Optional<User> user = userRepository.findById(UserId);

		//	.orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + employeeId));
		return userRepository.findById(UserId);
	}

	@GetMapping(path = "/users/name/{username}")
	public @ResponseBody User findUserByName(@PathVariable String username){

		return userRepository.findByName(username);
	}

	@PutMapping(value = "/users/update/{id}")
	public @ResponseBody String updateUser(@PathVariable(value = "id") Integer id,
										   @RequestBody User param){
		User user = userRepository.findById(id).get();
		user.setEmail(param.getEmail());
		user.setName(param.getName());
		userRepository.save(user);

		return "updated";



	}

	@RequestMapping(value="/users/delete/{id}", method={RequestMethod.DELETE, RequestMethod.GET})
	public @ResponseBody void deleteUser(@PathVariable(value = "id") Integer id){
		Optional<User> OptionalUser = userRepository.findById(id);
		User user = OptionalUser.get();
		userRepository.delete(user);


	}









	@PostMapping(path="/login")
	public @ResponseBody String Login (@RequestParam String email, @RequestParam String password) {
		List<User> list = userRepository.findAll();
		for (User u : list) {
			if (u.getEmail().equals(email) && u.getPassword().equals(password))
				return "yeahboi";
		}

		for (User u : list) {
			if (u.getEmail().equals(email))
				return "wrongpwboi";
		}

		return "noemailboi";
	}


// ----------------------------------------------------------------------------- Car

	//GET ALL CARS
	@GetMapping(path="/allcar")
	public @ResponseBody Iterable<Car> getAllCars() {
		// This returns a JSON or XML with the users
		return carRepository.findAll();
	}

	// GET CAR
	@GetMapping(path = "/cars/{id}")
	public  @ResponseBody  Optional<Car> getCarById(@PathVariable(value = "id") Integer Id)
	{
		//Optional<User> user = userRepository.findById(UserId);

		//	.orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + employeeId));
		return carRepository.findById(Id);
	}
	//UPDATE CAR
	@PutMapping(path = "/users/{id}/updatecar")
	public @ResponseBody String updateCar(@PathVariable(value = "id") Integer id, @RequestParam String brand,
										  @RequestParam String model,
										  @RequestParam String serial){
		Car car = carRepository.findById(id).get();
		car.setBrand(brand);
		car.setModel(model);
		car.setSerial(serial);
		carRepository.save(car);

		return "Updated car with id: " +  id;
	}



	//DELETE CAR
	@PutMapping(path = "/users/{id}/deletecar")
	public @ResponseBody String deleteCar(@PathVariable(value = "id") Integer id){

		updateCar(id,null,null,null);


		return "deleted car with id: " +  id;
	}









}
